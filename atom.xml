<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>glassy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/0556092907e070769db5b0d7e1935526</icon>
  <subtitle>Life is like a Markov chain, your future only depends on what you are doing now, and independent of your past.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://glassywu.github.io/"/>
  <updated>2019-01-06T13:19:27.360Z</updated>
  <id>https://glassywu.github.io/</id>
  
  <author>
    <name>glassy</name>
    <email>glassywu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Map-Reduce程序模板</title>
    <link href="https://glassywu.github.io/2019/01/06/Map-Reduce%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
    <id>https://glassywu.github.io/2019/01/06/Map-Reduce程序模板/</id>
    <published>2019-01-06T13:08:57.000Z</published>
    <updated>2019-01-06T13:19:27.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">StringTokenizer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.<span class="type">Path</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">DoubleWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">IntWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">LongWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">Text</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Job</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Mapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Partitioner</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Reducer</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.<span class="type">FileInputFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.<span class="type">FileOutputFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.<span class="type">GenericOptionsParser</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">// Map函数</span></span><br><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">MapClass</span> <span class="keyword">extends</span> <span class="title">Mapper&lt;k1</span>, <span class="title">v1</span>, <span class="title">k2</span>, <span class="title">v2&gt;</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    </span><br><span class="line">    public void map(k1 key, v1 value, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> </span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * <span class="doctag">TODO:</span> context.write(key, value);//写输出结果</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Partition函数</span></span><br><span class="line"><span class="comment"> * 实现将Map阶段的输出结果按指定的方法分到不同的分区中，为reduce阶段做准备</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">PartitionClass</span> <span class="keyword">extends</span> <span class="title">Partitioner&lt;k1</span>,<span class="title">v1&gt;</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    public int getPartition(k1 key, k1 value, int numPartitions) <span class="comment">//numPartitions参数值从主函数中的job.setNumReduceTasks(26)获得</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * <span class="doctag">TODO:</span> context.write(key, value);//写输出结果</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Combiner函数</span></span><br><span class="line"><span class="comment"> * 重载了默认的Reduce方法，通过key遍历其values&lt;Iterator&gt;, 并加以处理 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">CombinerClass</span> <span class="keyword">extends</span> <span class="title">Reducer&lt;k1</span>,<span class="title">v1</span>,<span class="title">k2</span>,<span class="title">v2&gt;</span> </span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    public void reduce(k1 key, <span class="type">Iterable</span>&lt;v1&gt; values,<span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> </span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * <span class="doctag">TODO:</span> context.write(key, value);//写输出结果</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Reduce函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">ReduceClass</span> <span class="keyword">extends</span> <span class="title">Reducer&lt;k1</span>,<span class="title">v1</span>,<span class="title">k2</span>,<span class="title">v2&gt;</span> </span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">      public void reduce(k1 key, <span class="type">Iterable</span>&lt;v1&gt; values,<span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> </span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * <span class="doctag">TODO:</span> context.write(key, value);//写输出结果</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">protected</span> void cleanup(<span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">InterruptedException</span> </span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * <span class="doctag">TODO:</span> context.write(key, value);//写输出结果</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">      &#125;  </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 作业提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">Exception</span> </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Configuration</span> conf = <span class="keyword">new</span> <span class="type">Configuration</span>();<span class="comment">//启用默认设置,Configuration对象封装了客户端服务器的配置</span></span><br><span class="line">    <span class="type">String</span>[] otherArgs = <span class="keyword">new</span> <span class="type">GenericOptionsParser</span>(conf, args).getRemainingArgs();<span class="comment">//获取主函数参数</span></span><br><span class="line">    <span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">System</span>.err.println(<span class="string">"Usage: ClassName &lt;in&gt; &lt;out&gt;"</span>);</span><br><span class="line">      <span class="type">System</span>.exit(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Job</span> job = <span class="type">Job</span>.getInstance(conf);<span class="comment">//定义一个作业控制</span></span><br><span class="line">        <span class="comment">// 替换为你的类</span></span><br><span class="line">    job.setJarByClass(<span class="type">ClassName</span>.<span class="keyword">class</span>);<span class="comment">//设置执行类</span></span><br><span class="line">    job.setNumReduceTasks(<span class="number">10</span>);<span class="comment">//定义多少个reduce</span></span><br><span class="line"></span><br><span class="line">    job.setMapperClass(<span class="type">MapClass</span>.<span class="keyword">class</span>);<span class="comment">//指定map类型</span></span><br><span class="line">    job.setCombinerClass(<span class="type">CombinerClass</span>.<span class="keyword">class</span>);<span class="comment">//指定combiner类型</span></span><br><span class="line">    job.setReducerClass(<span class="type">ReduceClass</span>.<span class="keyword">class</span>);<span class="comment">//指定reduce类型</span></span><br><span class="line">    job.setPartitionerClass(<span class="type">PartitionClass</span>.<span class="keyword">class</span>);<span class="comment">//指定partition类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置输出类型</span></span><br><span class="line">    job.setMapOutputKeyClass(<span class="type">Text</span>.<span class="keyword">class</span>);<span class="comment">//map的输出key类型设置</span></span><br><span class="line">    job.setMapOutputValueClass(<span class="type">IntWritable</span>.<span class="keyword">class</span>);<span class="comment">//map的输出value类型设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//**注意**：没有job.setReduceOutputKeyClass</span></span><br><span class="line">    job.setOutputKeyClass(<span class="type">Text</span>.<span class="keyword">class</span>);<span class="comment">//设置**最终**的输出类型是Text（有些MapReduce程序是没有Reduce部分的）</span></span><br><span class="line">    job.setOutputValueClass(<span class="type">DoubleWritable</span>.<span class="keyword">class</span>);<span class="comment">//设置最终的输出类型是DoubleWritable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义输入数据的路径，通过Debug Configuration的Argument设置，该路径可以是单个文件，也可以是目录，此时将目录下所有文件当作输入或符合特定文件模式的一组文件</span></span><br><span class="line">    <span class="type">FileInputFormat</span>.addInputPath(job, <span class="keyword">new</span> <span class="type">Path</span>(otherArgs[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">//定义输出数据的路径，通过Debug Configuration的Argument设置，在运行任务前该目录不能存在，否则会报错</span></span><br><span class="line">    <span class="type">FileOutputFormat</span>.setOutputPath(job, <span class="keyword">new</span> <span class="type">Path</span>(otherArgs[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">//每次配置Job的最后一步，System.exit（0）代表正常退出，System.exit(1)代表不正常退出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//作业提交就是这一句：job.waitForCompletion(true)，其含义是提交作业后并监控集群，作业完成后及时获得反馈信息，若作业正常完成就返回0，否则就返回1。</span></span><br><span class="line">    <span class="type">System</span>.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><ul><li>上面的类型参数在各个类中都需要对应上，比如Map的输出&lt;k2, v2&gt;需要对应上Reduce的输入&lt;k1, v1&gt;</li><li>使用时根据数据的类型修改类型参数和具体操作代码</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h1&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="hadoop" scheme="https://glassywu.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>非Root用户无法显示jps结果</title>
    <link href="https://glassywu.github.io/2018/12/10/%E9%9D%9ERoot%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BAjps%E7%BB%93%E6%9E%9C/"/>
    <id>https://glassywu.github.io/2018/12/10/非Root用户无法显示jps结果/</id>
    <published>2018-12-10T11:45:53.000Z</published>
    <updated>2018-12-23T10:32:17.421Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h4><p>非root用户执行jps命令时不显示结果，如图：<br><img src="/2018/12/10/非Root用户无法显示jps结果/1.jpg" title="非Root用户无法显示jps结果"></p><h4 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h4><p>jps需要在tmp下创建一个hsperfdata_username的目录，用来存放进程的ip，所以检查一下/tmp/hsperfdata_username是否存在，如果不存在则自己创建一个，然后再检查权限。<br><img src="/2018/12/10/非Root用户无法显示jps结果/2.jpg" title="非Root用户无法显示jps结果"></p><p>可以看出无法显示的原因是权限。</p><h4 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h4><p>修改文件权限：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R hadoop<span class="selector-class">.hadoop</span> /tmp/hsperfdata_hadoop</span><br></pre></td></tr></table></figure></p><img src="/2018/12/10/非Root用户无法显示jps结果/3.jpg" title="非Root用户无法显示jps结果"><h4 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h4><img src="/2018/12/10/非Root用户无法显示jps结果/4.jpg" title="非Root用户无法显示jps结果">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h4&gt;&lt;p&gt;非root用户执行jps命令时不显示结果，如图：&lt;br&gt;&lt;img src=&quot;/2018/12/10/非Roo
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://glassywu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>启动集群后Slave无法启动DataNode进程</title>
    <link href="https://glassywu.github.io/2018/10/09/%E5%90%AF%E5%8A%A8%E9%9B%86%E7%BE%A4%E5%90%8ESlave%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8DataNode%E8%BF%9B%E7%A8%8B/"/>
    <id>https://glassywu.github.io/2018/10/09/启动集群后Slave无法启动DataNode进程/</id>
    <published>2018-10-09T13:19:58.000Z</published>
    <updated>2018-10-09T13:52:21.711Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h4><p>执行start-all.sh后，slave进程中没有DataNode</p><h4 id="二、问题查看"><a href="#二、问题查看" class="headerlink" title="二、问题查看"></a>二、问题查看</h4><p>去Slave的/hadoop/logs文件查看日志，信息如下：<br><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/报错信息.jpg" title="启动集群后Slave无法启动DataNode进程"></p><p>表明：造成无法启动DataNode进程的原因是namenode的clusterID和datanode的clusterID不匹配，一般造成这种问题的原因是多次执行了namenode格式化命令：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure></p><p>ok,直接分别去查看响应的文件是否真的如此：</p><h6 id="1-查看slave："><a href="#1-查看slave：" class="headerlink" title="1.查看slave："></a>1.查看slave：</h6><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/slave截图.jpg" title="启动集群后Slave无法启动DataNode进程"><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/slave-version.jpg" title="启动集群后Slave无法启动DataNode进程"><h6 id="2-查看master"><a href="#2-查看master" class="headerlink" title="2.查看master:"></a>2.查看master:</h6><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/master截图.jpg" title="启动集群后Slave无法启动DataNode进程"><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/master-version.jpg" title="启动集群后Slave无法启动DataNode进程"><p><strong>ps:对比红色线框内容即可，图中为已修改完成的结果，二者一致即可！</strong></p><h4 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h4><p>重新执行start-all.sh命令，然后在slave执行jps，结果如下：<br><img src="/2018/10/09/启动集群后Slave无法启动DataNode进程/结果.jpg" title="启动集群后Slave无法启动DataNode进程"></p><p>恢复正常:)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h4&gt;&lt;p&gt;执行start-all.sh后，slave进程中没有DataNode&lt;/p&gt;
&lt;h4 id=&quot;二、问题查看&quot;
      
    
    </summary>
    
    
      <category term="hadoop" scheme="https://glassywu.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>重装系统后恢复hexo</title>
    <link href="https://glassywu.github.io/2018/08/16/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E6%81%A2%E5%A4%8Dhexo/"/>
    <id>https://glassywu.github.io/2018/08/16/重装系统后恢复hexo/</id>
    <published>2018-08-16T02:38:15.000Z</published>
    <updated>2018-08-16T06:07:48.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适用情况："><a href="#适用情况：" class="headerlink" title="适用情况："></a>适用情况：</h3><ul><li>重装了系统/换台电脑</li><li>保存了原来部署的hexo文件  </li></ul><p>原来的部署文件如下图：<br><img src="/2018/08/16/重装系统后恢复hexo/hexo1.jpg" title="重装系统后恢复hexo"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>安装git<ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git下载</a></li></ul></li><li><p>配置SSH key</p><ul><li>在”C:\Users\username”下运行git bash</li><li><p>运行如下命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C xxxx(你的email) <span class="meta"># 一直enter</span></span><br></pre></td></tr></table></figure></li><li><p>结束后会看到目录生成了.ssh文件</p></li><li>在github添加新的SSH key</li><li>Settings -&gt; SSH and GPG keys -&gt; new SSH key</li><li>在Key文本框里粘贴公钥id_rsa.pub文件的内容(注意后缀！这是公钥)</li><li>最后点击Add SSH Key</li></ul></li><li><p>安装Nodejs</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs下载</a></li></ul></li><li>安装hexo<ul><li>打开git bash,运行如下命令:<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>复制以下文件到新的目录</li></ol><img src="/2018/08/16/重装系统后恢复hexo/hexo2.jpg" title="重装系统后恢复hexo"> <p>(ps：其中蓝色框文件为.gitignore文件,如果没看到可以查看隐藏文件)</p><ol start="2"><li>在新拷贝的文件夹中打开git bash,运行以下命令： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment"># 安装模块</span></span><br></pre></td></tr></table></figure></li></ol><p>(ps:不要用hexo init 命令，这个命令会重置站点的配置文件_config.yml的内容:p)</p><ol start="3"><li><p>安装其他插件：</p><ul><li><p>部署到git的插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>others…</p></li></ul></li><li><p>生成和部署：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure></li><li><p>预览:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><p>在<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>查看效果</p><p>hexo 部署文件最后如图所示：</p><img src="/2018/08/16/重装系统后恢复hexo/hexo3.jpg" title="重装系统后恢复hexo">  <center>—end—</center></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;适用情况：&quot;&gt;&lt;a href=&quot;#适用情况：&quot; class=&quot;headerlink&quot; title=&quot;适用情况：&quot;&gt;&lt;/a&gt;适用情况：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重装了系统/换台电脑&lt;/li&gt;
&lt;li&gt;保存了原来部署的hexo文件  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原
      
    
    </summary>
    
    
      <category term="system" scheme="https://glassywu.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://glassywu.github.io/2018/04/05/hello-world/"/>
    <id>https://glassywu.github.io/2018/04/05/hello-world/</id>
    <published>2018-04-05T12:32:31.000Z</published>
    <updated>2018-12-27T10:58:08.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="glassy"><a href="#glassy" class="headerlink" title="glassy:"></a>glassy:</h3><p>之前的blog因为忘了备份全部丢失 = =</p><p>其实也没什么可供输出的，丢失了就丢失了，现在打算重新维护</p><p>另外简书也懒得搬运了，毕竟，没什么可供输出哇 :)</p><p>总之，欢迎来到glassy的blog</p><p>link start !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;glassy&quot;&gt;&lt;a href=&quot;#glassy&quot; class=&quot;headerlink&quot; title=&quot;glassy:&quot;&gt;&lt;/a&gt;glassy:&lt;/h3&gt;&lt;p&gt;之前的blog因为忘了备份全部丢失 = =&lt;/p&gt;
&lt;p&gt;其实也没什么可供输出的，丢失了就丢失了，现在打
      
    
    </summary>
    
    
      <category term="about-me" scheme="https://glassywu.github.io/tags/about-me/"/>
    
  </entry>
  
</feed>
